//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.34209
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2015.TrainBenchmark.Railway
{
    
    
    /// <summary>
    /// The public interface for SwitchPosition
    /// </summary>
    [XmlNamespaceAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark")]
    [XmlNamespacePrefixAttribute("hu.bme.mit.trainbenchmark")]
    [ModelRepresentationClassAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//SwitchPosition/")]
    [XmlDefaultImplementationTypeAttribute(typeof(SwitchPosition))]
    [DefaultImplementationTypeAttribute(typeof(SwitchPosition))]
    public interface ISwitchPosition : IModelElement, IRailwayElement
    {
        
        /// <summary>
        /// The position property
        /// </summary>
        Position Position
        {
            get;
            set;
        }
        
        /// <summary>
        /// The switch property
        /// </summary>
        ISwitch Switch
        {
            get;
            set;
        }
        
        /// <summary>
        /// The route property
        /// </summary>
        IRoute Route
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Position property changed its value
        /// </summary>
        event EventHandler PositionChanged;
        
        /// <summary>
        /// Gets fired when the Switch property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> SwitchChanged;
        
        /// <summary>
        /// Gets fired when the Route property changed its value
        /// </summary>
        event EventHandler<ValueChangedEventArgs> RouteChanged;
    }
}

