//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.34209
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2015.TrainBenchmark.Railway
{
    
    
    [XmlNamespaceAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark")]
    [XmlNamespacePrefixAttribute("hu.bme.mit.trainbenchmark")]
    [ModelRepresentationClassAttribute("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Switch/")]
    public class Switch : TrackElement, ISwitch, IModelElement
    {
        
        /// <summary>
        /// The backing field for the CurrentPosition property
        /// </summary>
        private Position _currentPosition;
        
        /// <summary>
        /// The backing field for the Positions property
        /// </summary>
        private SwitchPositionsCollection _positions;
        
        public Switch()
        {
            this._positions = new SwitchPositionsCollection(this);
        }
        
        /// <summary>
        /// The currentPosition property
        /// </summary>
        [XmlElementNameAttribute("currentPosition")]
        [XmlAttributeAttribute(true)]
        public virtual Position CurrentPosition
        {
            get
            {
                return this._currentPosition;
            }
            set
            {
                if ((value != this._currentPosition))
                {
                    this._currentPosition = value;
                    this.OnCurrentPositionChanged(EventArgs.Empty);
                    this.OnPropertyChanged("CurrentPosition");
                }
            }
        }
        
        /// <summary>
        /// The positions property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("positions")]
        [XmlAttributeAttribute(true)]
        public virtual IListExpression<ISwitchPosition> Positions
        {
            get
            {
                return this._positions;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SwitchReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets fired when the CurrentPosition property changed its value
        /// </summary>
        public event EventHandler CurrentPositionChanged;
        
        /// <summary>
        /// Raises the CurrentPositionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentPositionChanged(EventArgs eventArgs)
        {
            EventHandler handler = this.CurrentPositionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of the current model element
        /// </summary>
        public override NMF.Models.Meta.IClass GetClass()
        {
            return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://www.semanticweb.org/ontologies/2015/ttc/trainbenchmark#//Switch/");
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Switch class
        /// </summary>
        public class SwitchReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Switch _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SwitchReferencedElementsCollection(Switch parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Positions.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Positions.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Positions.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ISwitchPosition positionsCasted = item.As<ISwitchPosition>();
                if ((positionsCasted != null))
                {
                    this._parent.Positions.Add(positionsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Positions.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Positions.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> positionsEnumerator = this._parent.Positions.GetEnumerator();
                try
                {
                    for (
                    ; positionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = positionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    positionsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ISwitchPosition switchPositionItem = item.As<ISwitchPosition>();
                if (((switchPositionItem != null) 
                            && this._parent.Positions.Remove(switchPositionItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Positions).GetEnumerator();
            }
        }
    }
}

